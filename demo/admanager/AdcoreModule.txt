package adcore

import (
	"embed"
	"fmt"

	// "github.com/urfave/cli"
	"github.com/urfave/cli"
	"gorm.io/gorm"
	"pixelplux.com/fireback/modules/workspaces"
)

//go:embed *Module3.yml
var Module2Definitions embed.FS

func AdcoreModuleSetup() *workspaces.ModuleProvider {
	module := &workspaces.ModuleProvider{
		Name:        "adcore",
		Definitions: &Module2Definitions,
	}

	module.ProvideMockImportHandler(func() {

	})

	module.ProvideSeederImportHandler(func() {

	})

	module.ProvideMockWriterHandler(func(languages []string) {

	})

	module.ProvidePermissionHandler(
		ALL_ADINSTALLER_PERMISSIONS,
		ALL_ADSTATUS_PERMISSIONS,
		ALL_ADPLACE_PERMISSIONS,
		ALL_ADPLACEOWNER_PERMISSIONS,
	)

	module.Actions = [][]workspaces.Module2Action{
		GetAdInstallerModule2Actions(),
		GetAdModule2Actions(),
		GetAdPlaceModule2Actions(),
		GetAdPlaceOwnerModule2Actions(),
		GetAdStatusModule2Actions(),
	}

	module.ProvideEntityHandlers(func(dbref *gorm.DB) {
		if err := dbref.AutoMigrate(&AdInstallerEntity{}); err != nil {
			fmt.Println(err.Error())
		}
		if err := dbref.AutoMigrate(&AdStatusEntity{}); err != nil {
			fmt.Println(err.Error())
		}
		if err := dbref.AutoMigrate(&AdPlaceEntity{}); err != nil {
			fmt.Println(err.Error())
		}
		if err := dbref.AutoMigrate(&AdPlaceOwnerEntity{}); err != nil {
			fmt.Println(err.Error())
		}
		if err := dbref.AutoMigrate(&AdEntity{}, &AdLocations{}, &AdImages{}, &AdPeriods{}); err != nil {
			fmt.Println(err.Error())
		}
	})

	module.ProvideCliHandlers([]cli.Command{
		AdInstallerCliFn(),
		AdStatusCliFn(),
		AdPlaceCliFn(),
		AdPlaceOwnerCliFn(),
		AdCliFn(),
	})

	return module
}
